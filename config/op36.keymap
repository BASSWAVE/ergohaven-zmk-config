#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <50>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        hmr2: hmr2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
            label = "HMR2";
        };

        hml2: hml2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <75>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
            label = "HML2";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q        &kp W      &kp E         &kp R          &kp T                          &kp Y  &kp U    &kp I         &kp O      &kp P
  &hml LGUI A  &hml2 1 S  &hml LSHFT D  &hml2 2 F      &kp G                          &kp H  &kp J    &hmr RSHFT K  &hmr2 1 L  &kp SINGLE_QUOTE
  &kp Z        &kp X      &kp C         &kp V          &kp B                          &kp N  &kp M    &kp COMMA     &kp DOT    &kp SLASH
                                        &kp BACKSPACE  &to 3  &kp SPACE    &kp ENTER  &none  &kp TAB
            >;
        };

        punctuation {
            bindings = <
  &kp HASH   &kp LESS_THAN  &kp GREATER_THAN  &kp MINUS   &none                       &none        &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE
  &kp TILDE  &kp EXCL       &kp COLON         &kp EQUAL   &kp PLUS                    &kp PERCENT  &kp STAR        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp UNDER
  &kp GRAVE  &kp AT         &kp CARET         &kp DOLLAR  &none                       &none        &kp AMPERSAND   &kp PIPE              &kp BACKSLASH          &kp SEMI
                                              &trans      &none     &trans    &trans  &none        &trans
            >;
        };

        sym {
            bindings = <
  &none  &none  &none  &none   &none                    &none  &kp N7  &kp N8  &kp N9  &none
  &none  &none  &none  &none   &none                    &none  &kp N4  &kp N5  &kp N6  &kp N0
  &none  &none  &none  &none   &none                    &none  &kp N1  &kp N2  &kp N3  &none
                       &trans  &none  &trans    &trans  &none  &trans
            >;
        };

        nav {
            bindings = <
  &kp ESCAPE    &none             &none           &kp DELETE    &kp CAPS                         &none          &none     &none     &none   &none
  &kp LEFT_GUI  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp TAB                          &kp BACKSPACE  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT
  &none         &none             &kp INS         &none         &kp SPACE                        &none          &none     &none     &none   &none
                                                  &mo 5         &none      &mo 4    &lt 6 ENTER  &to 0          &trans
            >;
        };

        left_gui {
            bindings = <
  &kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &kp LG(T)                  &kp LG(Y)  &kp LG(U)  &kp LG(I)      &kp LG(O)    &kp LG(P)
  &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)  &kp LG(G)                  &kp LG(H)  &kp LG(J)  &kp LG(K)      &kp LG(L)    &kp LG(SQT)
  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(B)                  &kp LG(N)  &kp LG(M)  &kp LG(COMMA)  &kp LG(DOT)  &kp LG(FSLH)
                                   &none      &none      &none    &none  &none      &none
            >;
        };

        control {
            bindings = <
  &kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)                  &none  &none  &none  &none  &none
  &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)                  &none  &none  &none  &none  &none
  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)                  &none  &none  &none  &none  &none
                                   &none      &none      &none    &none  &none  &none
            >;
        };

        adj {
            bindings = <
  &bootloader   &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1                          &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI      &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN                   &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &kp CAPSLOCK  &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT  &kp C_PP           &kp C_NEXT          &studio_unlock
                                             &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
